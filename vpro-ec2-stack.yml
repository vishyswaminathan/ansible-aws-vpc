---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variable
      include_vars: vars/vpc-output_vars

    - name: Import vprofile ec2 setup variable
      include_vars: vars/vprostacksetup

    - name: Import VPC setup variable
      include_vars: vars/vpc_setup


    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{region}}"
      register: vprokey_out

    - name: debug vprokey details
      debug:
        var: vprokey_out




    - name: save private key into file loginkey_vpro.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

#### random changes to update code ###


    - name: create SG for load balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within sg
        region : "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out


    - name: create SG for vprofile stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out.group_id}}"


          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: vproStackSG_out


    - name: update SG with its own sg ID
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vproStackSG_out.group_id}}"


    - name: creating Nginx web01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        security_groups: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        count: 1
      register: web01_out





    - name: creating Tomcat app01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        security_groups: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        count: 1
      register: app01_out






    - name: creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        security_groups: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        count: 1
      register: rmq01_out




    - name: creating Mysql db01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        security_groups: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        count: 1
      register: db01_out


    - debug:
        var: db01_out




